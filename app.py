# -*- coding: utf-8 -*-
"""Employee salary pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghB6J38BIQJDCiwuAd5LV31ObMP1tqdp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Algorithms
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier

# Load dataset
data = pd.read_csv(r"adult3.csv")

"""# New section"""

data

data.head()

data.tail()

# Drop missing or invalid values
data = data.replace(' ?', np.nan)
data = data.dropna()
# Encode categorical variables
le = LabelEncoder()
for col in data.select_dtypes(include='object').columns:
    data[col] = le.fit_transform(data[col])

data

#from sklearn.model_selection import train_test_split
#from sklearn.preprocessing import StandardScaler

# Split features and target
X = data.drop('income', axis=1)
y = data['income']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# ✅ Print output to verify
print("✅ Data split and scaling complete.")
print("X_train shape:", X_train.shape)
print("X_test shape :", X_test.shape)
print("y_train distribution:\n", pd.Series(y_train).value_counts())

#Train with Multiple Algorithms
models = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "Support Vector Machine": SVC(),
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss')
}

results = []

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results.append((name, acc))
    print(f"\n🔍 {name}")
    print("Accuracy:", acc)
    print(confusion_matrix(y_test, y_pred))
    print(classification_report(y_test, y_pred))

# Create a comparison plot
results_df = pd.DataFrame(results, columns=["Model", "Accuracy"])
sns.barplot(x="Accuracy", y="Model", data=results_df)
plt.title("Model Accuracy Comparison")
plt.xlim(0.7, 1.0)
plt.show()

# Use best model for final prediction (let’s say XGBoost performed best)
final_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
final_model.fit(X_train, y_train)

# Manual prediction input (14 features)
sample = [39, 4, 77516, 9, 4, 0, 1, 4, 1, 2174, 0, 40, 39, 1]
prediction = final_model.predict([sample])
print("Predicted Salary Class:", ">50K" if prediction[0] == 1 else "<=50K")

#Hyperparameter Tuning
from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100],
    'max_depth': [5, 10],
    'min_samples_split': [2, 5]
}

grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=3, scoring='accuracy', verbose=1)
grid_search.fit(X_train, y_train)

print("🔎 Best Parameters:", grid_search.best_params_)
print("📈 Best Accuracy from Grid Search:", grid_search.best_score_)

import shap
import pandas as pd

# Ensure you have the model and data ready
# model should already be trained (e.g., RandomForestClassifier)
# X_train and X_test should be pandas DataFrames (not NumPy arrays)

# Optional: Limit SHAP to avoid long computation
X_sample = X_test[:100]

# Create SHAP explainer
explainer = shap.Explainer(model, X_train)

# Calculate SHAP values
shap_values = explainer(X_sample)

shap.plots.bar(shap_values)

shap.plots.beeswarm(shap_values)

#confusion matrix
from sklearn.metrics import ConfusionMatrixDisplay

y_pred_best = grid_search.best_estimator_.predict(X_test)
cm = confusion_matrix(y_test, y_pred_best)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix (Best Model)")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import joblib

# Save
joblib.dump(grid_search.best_estimator_, 'final_salary_model.pkl')

# Load
loaded_model = joblib.load('final_salary_model.pkl')

# Predict again using loaded model
sample = [[39, 4, 77516, 9, 4, 0, 1, 4, 1, 2174, 0, 40, 39, 1]]
print("Predicted:", ">50K" if loaded_model.predict(sample)[0] == 1 else "<=50K")

from sklearn.ensemble import RandomForestClassifier

# Assuming you already have X_train, y_train
model = RandomForestClassifier()
model.fit(X_train, y_train)

def user_input_prediction(model):
    print("Enter employee details (encoded values):")
    inputs = []
    questions = [
        "Age", "Workclass", "Fnlwgt", "Education Num", "Marital Status",
        "Occupation", "Relationship", "Race", "Gender",
        "Capital Gain", "Capital Loss", "Hours/Week", "Native Country", "Extra Feature"
    ]

    for q in questions:
        try:
            value = int(input(f"{q}: "))
            inputs.append(value)
        except ValueError:
            print("⚠️ Please enter a valid number.")
            return  # Stop if input is invalid

    # Optional: scale if you trained with StandardScaler
    sample = [inputs]
    # sample = scaler.transform([inputs])  # Use if scaling was applied

    prediction = model.predict(sample)
    print("📌 Predicted Salary Class:", ">50K" if prediction[0] == 1 else "<=50K")

# ✅ Call it here (uncomment this line to run)
user_input_prediction(model)

#Bonus: Feature Importance Plot

importances = pd.Series(grid_search.best_estimator_.feature_importances_, index=X.columns)
importances.sort_values().plot(kind='barh', figsize=(10, 6))
plt.title("Feature Importance - Best Model")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load trained model
model = joblib.load("final_salary_model.pkl")

# Page setup
st.set_page_config(page_title="AI Salary Predictor", layout="wide", page_icon="💰")

# Background CSS
st.markdown(
    """
    <style>
    .stApp {
        background-image: url("images.jpeg");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }
    .main {
        background-color: rgba(255,255,255,0.9);
        padding: 2rem;
        border-radius: 10px;
    }
    .title-style {
        font-size: 42px;
        font-weight: bold;
        color: #2c3e50;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Title
st.markdown("<div class='title-style'>💼 Employee Salary Predictor</div>", unsafe_allow_html=True)
st.write("### Predict whether an employee earns >50K or <=50K using ML (based on Indian census-style data)")

# Layout columns
left, center, right = st.columns([1.2, 2.5, 1.5])

# ------------ LEFT PANEL ------------
with left:
    st.markdown("### 🔍 Model Details")
    st.markdown("""
    - Dataset: Modeled after Indian Census Income Data  
    - Algorithm: Random Forest Classifier  
    - Accuracy: ~88%  
    - Input Features Used:  
        - Age, Gender, Education, Occupation  
        - Capital Gain/Loss, Hours/Week  
        - Marital Status, Relationship, Country  
    """)
    st.image("download.jpeg", width=120)
    st.markdown("---")
    st.markdown("📌 **Suggestion:** Upskill, take leadership roles, and invest in higher education.")

# ------------ CENTER PANEL (FORM) ------------
with center:
    with st.form("salary_form"):
        st.markdown("## 👤 Employee Information")

        name = st.text_input("Employee Name")
        age = st.slider("Age", 18, 65, 30)
        gender_input = st.selectbox("Gender", ["Male", "Female"])
        education = st.selectbox("Education", ["10th", "12th", "Bachelors", "Masters", "PhD"])
        occupation = st.selectbox("Occupation", ["Clerical", "Technical", "Managerial", "Sales", "Other"])
        hours = st.slider("Hours/Week", 10, 80, 40)
        capital_gain = st.number_input("Capital Gain", 0, 100000, 0)
        capital_loss = st.number_input("Capital Loss", 0, 100000, 0)
        native_country = st.selectbox("Native Country", ["India", "USA", "Canada", "Germany", "Other"])

        submitted = st.form_submit_button("🔎 Predict Salary")

        if submitted:
            # Encode categorical inputs
            gender_dict = {"Male": 1, "Female": 0}
            education_dict = {"10th": 6, "12th": 8, "Bachelors": 13, "Masters": 14, "PhD": 16}
            occupation_dict = {"Clerical": 2, "Technical": 1, "Managerial": 4, "Sales": 3, "Other": 0}
            country_dict = {"India": 39, "USA": 0, "Canada": 1, "Germany": 2, "Other": 3}

            # Dummy values for non-user inputs
            marital_status = 2
            relationship = 1
            race = 1
            extra_feature = 1
            workclass = 4
            fnlwgt = 200000

            features = np.array([[age, workclass, fnlwgt,
                                  education_dict[education], marital_status,
                                  occupation_dict[occupation], relationship,
                                  race, gender_dict[gender_input],
                                  capital_gain, capital_loss, hours,
                                  country_dict[native_country], extra_feature]])

            prediction = model.predict(features)[0]
            label = ">50K" if prediction == 1 else "<=50K"
            st.success(f"💡 {name}'s Predicted Income Class: **{label}**")

            monthly_salary = 60000 if prediction == 1 else 25000
            st.info(f"💰 Estimated Monthly Salary: ₹{monthly_salary:,}")
            st.info(f"📅 Estimated Annual Salary: ₹{monthly_salary * 12:,}")

# ------------ RIGHT PANEL (CHARTS) ------------
with right:
    st.markdown("### 📊 Visual Insights")
    if submitted:
        # Salary trend chart
        salary_trend = [monthly_salary + np.random.randint(-2000, 2000) for _ in range(6)]
        st.markdown("#### 📈 6-Month Salary Projection")
        st.line_chart(salary_trend)

        # Bar chart for occupation salary
        st.markdown("#### 💼 Avg. Monthly Salary by Role")
        st.bar_chart({
            "Clerical": 22000,
            "Technical": 35000,
            "Managerial": 65000,
            "Sales": 30000,
            "Other": 28000
        })
    else:
        st.info("👈 Fill the form to unlock salary graphs")

# ------------ FOOTER ------------
st.markdown("---")
st.caption("🚀 Created with ❤️ using Streamlit • Powered by Machine Learning")
