# -*- coding: utf-8 -*-
"""Employee salary pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghB6J38BIQJDCiwuAd5LV31ObMP1tqdp
"""


# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler

# Load the model
model_data = joblib.load("salary_predictor.pkl")
model = model_data["model"]
scaler = model_data["scaler"]
feature_names = model_data["feature_names"]

# Streamlit UI
st.set_page_config(page_title="AI Salary Predictor", layout="wide")

st.title("ðŸ’¼ Employee Salary Predictor")
st.write("Predict whether an employee earns >50K or <=50K")

# Input form
with st.form("form"):
    name = st.text_input("Employee Name")
    age = st.slider("Age", 18, 65, 30)
    gender_input = st.selectbox("Gender", ["Male", "Female"])
    education = st.selectbox("Education", ["10th", "12th", "Bachelors", "Masters", "PhD"])
    occupation = st.selectbox("Occupation", ["Clerical", "Technical", "Managerial", "Sales", "Other"])
    hours = st.slider("Hours/Week", 10, 80, 40)
    capital_gain = st.number_input("Capital Gain", 0, 100000, 0)
    capital_loss = st.number_input("Capital Loss", 0, 100000, 0)
    native_country = st.selectbox("Native Country", ["India", "USA", "Canada", "Germany", "Other"])
    submit = st.form_submit_button("ðŸ”Ž Predict Salary")

    if submit:
        gender_dict = {"Male": 1, "Female": 0}
        education_dict = {"10th": 6, "12th": 8, "Bachelors": 13, "Masters": 14, "PhD": 16}
        occupation_dict = {"Clerical": 2, "Technical": 1, "Managerial": 4, "Sales": 3, "Other": 0}
        country_dict = {"India": 39, "USA": 0, "Canada": 1, "Germany": 2, "Other": 3}

        # Fixed/static features
        marital_status = 2
        relationship = 1
        race = 1
        extra_feature = 1
        workclass = 4
        fnlwgt = 200000

        features = np.array([[age, workclass, fnlwgt, education_dict[education], marital_status,
                              occupation_dict[occupation], relationship, race, gender_dict[gender_input],
                              capital_gain, capital_loss, hours, country_dict[native_country], extra_feature]])

        input_df = pd.DataFrame(features, columns=feature_names)
        scaled_input = scaler.transform(input_df)
        prediction = model.predict(scaled_input)[0]

        label = ">50K" if prediction == 1 else "<=50K"
        st.success(f"ðŸ’¡ {name}'s Predicted Income Class: **{label}**")

        monthly_salary = 60000 if prediction == 1 else 25000
        st.info(f"ðŸ’° Estimated Monthly Salary: â‚¹{monthly_salary:,}")
        st.info(f"ðŸ“… Estimated Annual Salary: â‚¹{monthly_salary * 12:,}")

        # Charts
        st.subheader("ðŸ“ˆ 6-Month Salary Projection")
        salary_trend = [monthly_salary + np.random.randint(-2000, 2000) for _ in range(6)]
        st.line_chart(salary_trend)

        st.subheader("ðŸ’¼ Avg. Monthly Salary by Role")
        st.bar_chart({
            "Clerical": 22000,
            "Technical": 35000,
            "Managerial": 65000,
            "Sales": 30000,
            "Other": 28000
        })
