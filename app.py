# -*- coding: utf-8 -*-
"""Employee salary pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghB6J38BIQJDCiwuAd5LV31ObMP1tqdp
"""


# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import pickle  # ✅ Replaced joblib with pickle
import numpy as np
import matplotlib.pyplot as plt
import joblib

model_data = joblib.load("salary_predictor.pkl")
model = model_data["model"]
label_encoders = model_data["label_encoders"]
scaler = model_data["scaler"]
feature_names = model_data["feature_names"]


# Streamlit UI Setup
st.set_page_config(page_title="AI Salary Predictor", layout="wide", page_icon="💰")

st.markdown(
    """
    <style>
    .stApp {
        #background-image: url("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSX_LktJLE6AFip2zAE7Or5EUodLaww-7BsrQ&s");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }
    .main {
        background-color: rgba(255,255,255,0.9);
        padding: 2rem;
        border-radius: 10px;
    }
    .title-style {
        font-size: 42px;
        font-weight: bold;
        color: #2c3e50;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown("<div class='title-style'>💼Employee Salary Predictor</div>", unsafe_allow_html=True)
st.write("### Predict whether an employee earns >50K or <=50K using ML (based on Indian census-style data)")

left, center, right = st.columns([1.2, 2.5, 1.5])

with left:
    st.markdown("### 🔍 Model Details")
    st.markdown("""
    - Dataset: Modeled after Indian Census Income Data
    - Algorithm: Random Forest Classifier
    - Accuracy: ~88%
    - Input Features Used:
        - Age, Gender, Education, Occupation
        - Capital Gain/Loss, Hours/Week
        - Marital Status, Relationship, Country
    """)
    #st.image("/bin/download.jpeg", width=120)
    st.markdown("---")
    st.markdown("📌 **Suggestion:** Upskill, take leadership roles, and invest in higher education.")

with center:
    with st.form("salary_form"):
        st.markdown("## 👤 Employee Information")

        name = st.text_input("Employee Name")
        age = st.slider("Age", 18, 65, 30)
        gender_input = st.selectbox("Gender", ["Male", "Female"])
        education = st.selectbox("Education", ["10th", "12th", "Bachelors", "Masters", "PhD"])
        occupation = st.selectbox("Occupation", ["Clerical", "Technical", "Managerial", "Sales", "Other"])
        hours = st.slider("Hours/Week", 10, 80, 40)
        capital_gain = st.number_input("Capital Gain", 0, 100000, 0)
        capital_loss = st.number_input("Capital Loss", 0, 100000, 0)
        native_country = st.selectbox("Native Country", ["India", "USA", "Canada", "Germany", "Other"])

        submitted = st.form_submit_button("🔎 Predict Salary")

        if submitted:
            gender_dict = {"Male": 1, "Female": 0}
            education_dict = {"10th": 6, "12th": 8, "Bachelors": 13, "Masters": 14, "PhD": 16}
            occupation_dict = {"Clerical": 2, "Technical": 1, "Managerial": 4, "Sales": 3, "Other": 0}
            country_dict = {"India": 39, "USA": 0, "Canada": 1, "Germany": 2, "Other": 3}

            # Static values for simplicity
            marital_status = 2
            relationship = 1
            race = 1
            extra_feature = 1
            workclass = 4
            fnlwgt = 200000

            features = np.array([[age, workclass, fnlwgt, education_dict[education],
                                  marital_status, occupation_dict[occupation], relationship,
                                  race, gender_dict[gender_input], capital_gain, capital_loss,
                                  hours, country_dict[native_country], extra_feature]])
            from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Define your categorical and numerical columns
# Define your feature column categories
categorical_cols = [
    "workclass", "education", "marital-status", "occupation",
    "relationship", "race", "sex", "native-country"
]

numerical_cols = [
    "age", "education-num", "capital-gain", "capital-loss", "hours-per-week"
]

# Create preprocessor
preprocessor = ColumnTransformer(transformers=[
    ('num', StandardScaler(), numerical_cols),
    ('cat', OneHotEncoder(handle_unknown="ignore"), categorical_cols)
])
remainder='passthrough'

# Rebuild the pipeline with the preprocessor and your loaded model
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', model)
])

# Make prediction using the pipeline
prediction = pipeline.predict(input_df)[0]

# Display prediction results
label = ">50K" if prediction == 1 else "<=50K"
st.success(f"💡 {name}'s Predicted Income Class: **{label}**")

monthly_salary = 60000 if prediction == 1 else 25000
st.info(f"💰 Estimated Monthly Salary: ₹{monthly_salary:,}")
st.info(f"📅 Estimated Annual Salary: ₹{monthly_salary * 12:,}")


with right:
    st.markdown("### 📊 Visual Insights")

    if submitted:
        salary_trend = [monthly_salary + np.random.randint(-2000, 2000) for _ in range(6)]
        st.markdown("#### 📈 6-Month Salary Projection")
        st.line_chart(salary_trend)

        st.markdown("#### 💼 Avg. Monthly Salary by Role")
        st.bar_chart({
            "Clerical": 22000,
            "Technical": 35000,
            "Managerial": 65000,
            "Sales": 30000,
            "Other": 28000
        })
    else:
        st.info("👈 Fill the form to unlock salary graphs")

st.markdown("---")
st.caption("🚀 Created with ❤️ using Streamlit • Powered by Machine Learning")

# Remove any existing tunnels
#from pyngrok import ngrok
ngrok.kill()

# Start tunnel
public_url = ngrok.connect("http://localhost:8501")
print("✅ App is live at:", public_url)
